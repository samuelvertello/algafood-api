*********************************** Usando MappingJacksonValue Para projetar view ***************************************

// Usando jackson para criacao de view de modelo de representação


   @GetMapping
   public MappingJacksonValue listar(@RequestParam(required = false) String projecao) {
      List<Restaurante> restaurantes = restauranteRepository.findAll();
      List<RestauranteModel> restaurantesModel = restauranteModelAssembler.toCollectionModel(restaurantes);

      MappingJacksonValue restaurantesWrapper = new MappingJacksonValue(restaurantesModel);

      restaurantesWrapper.setSerializationView(RestauranteView.Resumo.class);

      if("apenas-nome".equals(projecao)){
         restaurantesWrapper.setSerializationView(RestauranteView.ApenasNome.class);

      } else if ("completo".equals(projecao)) {
            restaurantesWrapper.setSerializationView(null);
   }
      return restaurantesWrapper;
   }

   \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

   ******************************** Usando MappingJackson e simplesFilter provider ***************************************

   // Usando MappingJacksonValue para ter uma representacao customizada, 
   // exibindo apenas as propriedades que o consumidor da API quiser ver.
   // ********observação: a classe de modelo de representacao deve estar anotada com a anotacao @JsonFilter("pedidoFilter")


   @GetMapping
   public MappingJacksonValue listar(@RequestParam(required = false) String campos) {          
            
      List<Pedido> Pedidos = pedidoRepository.findAll();
      List<PedidoResumoModel> pedidosModel = pedidoResumoModelAssembler.toCollectionModel(Pedidos);

      MappingJacksonValue pedidosWrapper = new MappingJacksonValue(pedidosModel);

      SimpleFilterProvider filterProvider = new SimpleFilterProvider();
      filterProvider.addFilter("pedidoFilter", SimpleBeanPropertyFilter.serializeAll());

      if(org.apache.commons.lang3.StringUtils.isNotBlank(campos)) {
         filterProvider.addFilter("pedidoFilter", SimpleBeanPropertyFilter.filterOutAllExcept(campos.split(",")));
      }

      pedidosWrapper.setFilters(filterProvider);

      return pedidosWrapper;
       
   }

   \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\



   ************************************** Usando Object Mapper para atualizar parcial *****************************************


   


    @Autowired
   private SmartValidator Validator;

   @PatchMapping("/{restauranteId}")
   public RestauranteModel atualizarParcial(@PathVariable Long restauranteId,
   @RequestBody Map<String, Object> campos) {

   Restaurante restauranteAtual =
   restauranteService.buscarOuFalhar(restauranteId);

   merge(campos, restauranteAtual);
   validate(restauranteAtual, "restaurante");

   return atualizar(restauranteId, restauranteAtual);
   }

   private void validate(Restaurante restaurante, String objectName) {

   BeanPropertyBindingResult bindingResult = new
   BeanPropertyBindingResult(restaurante, objectName);

   Validator.validate(restaurante, bindingResult);

   if(bindingResult.hasErrors()) {
   throw new ValidacaoException(bindingResult);
   }
   }

   private void merge(Map<String, Object> dadosOrigem, Restaurante
   restauranteDestino) {

   try{
   ObjectMapper objectMapper = new ObjectMapper();
   objectMapper.configure(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES,
   true);
   objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,
   true);

   Restaurante restauranteOrigem = objectMapper.convertValue(dadosOrigem,
   Restaurante.class);

   dadosOrigem.forEach((nomePropriedade, valorPropriedade) -> {
   Field field = ReflectionUtils.findField(Restaurante.class, nomePropriedade);
   field.setAccessible(true);

   Object novoValor = ReflectionUtils.getField(field, restauranteOrigem);

   ReflectionUtils.setField(field, restauranteDestino, novoValor);
   });
   }catch(IllegalArgumentException e) {
   Throwable rootCause = ExceptionUtils.getRootCause(e);
   throw new HttpMessageNotReadableException(e.getMessage(), rootCause, null);

   }
   }

   \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
                                 ADICIONANDO PARAMETRO GLOBALMENTE EM DOCUMENTAÇÂO

      .globalRequestParameters(Arrays.asList(
         new RequestParameterBuilder()
            .name("campos")
            .description("Nomes das propriedades para filtrar na resposta, separados por virgula")
            .in(ParameterType.QUERY)
            .required(true)
            .query(q -> q.model(m -> m.scalarModel(ScalarType.STRING)))
            .build()))